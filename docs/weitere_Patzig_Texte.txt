
## Graph-Refactoring am Beispiel der Mitschrift von Patzig

### Import der Patzig-Mitschrift

Mit den folgenden Befehlen wird die Humboldt-Mitschrift von Patzig in die Graphdatenbank importiert, jedem Knoten zur Identifikation die DTA-URL als Propterty mitgegeben und die Knoten durchnummeriert. Die Nummerierung ist für das wiederholte Auffinden der in diesem Beitrag behandelten Textstellen notwendig.

~~~Cypher
// Alles löschen
MATCH(n) DETACH DELETE n;

// Patzig importieren
call
apoc.xml.import('http://www.deutschestextarchiv.de/book/download_xml/patzig_msgermfol841842_1828',{createNextWorkRelationships: true})
yield node return node;

// URL von Dokument auf alle Wort-Knoten kopieren:
match (d:XmlDocument)-[:NEXT_WORD*]->(w:XmlWord)
set w.url = d.url;

// Knoten durchzählen
MATCH p = (start:XmlDocument)-[:NEXT*]->(end:XmlTag)
WHERE NOT (end)-[:NEXT]->() AND start.url = 'http://www.deutschestextarchiv.de/book/download_xml/patzig_msgermfol841842_1828'
WITH nodes(p) as nodes, range(0, size(nodes(p))) AS indexes
UNWIND indexes AS index
SET (nodes[index]).DtaID = index;
~~~

### Liste aller im Patzig-Manusskript vorkommenden Elemente sortiert nach Häufigkeit

Mit dem folgenden cypher-Query erhält man eine Liste der vorkommenden XML-Elemente nach Häufigkeit:

~~~cypher
MATCH (n:XmlTag)
RETURN n._name,
count(n._name) AS Anzahl
ORDER BY Anzahl DESC;
~~~

|Element|Anzahl|
|:---------|--------:|
|	lb	|	16075	|
|	hi	|	3768	|
|	choice	|	2184	|
|	expan	|	1856	|
|	abbr	|	1856	|
|	supplied	|	1517	|
|	persName	|	925	|
|	note	|	914	|
|	add	|	782	|
|	del	|	644	|
|	unclear	|	526	|
|	subst	|	516	|
|	pb	|	422	|
|	gap	|	419	|
|	fw	|	357	|
|	p	|	238	|
|	metamark	|	234	|
|	reg	|	221	|
|	orig	|	221	|
|	corr	|	107	|
|	sic	|	107	|
|	div	|	64	|
|	head	|	63	|
|	item	|	51	|
|	rendition	|	22	|
|	space	|	20	|
|	ref	|	19	|
|	bibl	|	15	|
|	list	|	13	|
|	idno	|	12	|
|	surname	|	12	|
|	forename	|	12	|
|	figure	|	10	|
|	milestone	|	9	|
|	orgName	|	7	|
|	resp	|	6	|
|	respStmt	|	6	|
|	editor	|	6	|
|	cell	|	6	|
|	measure	|	4	|
|	titlePart	|	4	|
|	classCode	|	4	|
|	handNote	|	4	|
|	date	|	2	|
|	edition	|	2	|
|	titleStmt	|	2	|
|	editionStmt	|	2	|
|	publisher	|	2	|
|	publicationStmt	|	2	|
|	title	|	2	|
|	author	|	2	|
|	pubPlace	|	2	|
|	row	|	2	|
|	biblFull	|	1	|
|	fileDesc	|	1	|
|	editorialDecl	|	1	|
|	text	|	1	|
|	physDesc	|	1	|
|	back	|	1	|
|	sourceDesc	|	1	|
|	address	|	1	|
|	country	|	1	|
|	textClass	|	1	|
|	titlePage	|	1	|
|	repository	|	1	|
|	encodingDesc	|	1	|
|	front	|	1	|
|	availability	|	1	|
|	msDesc	|	1	|
|	addrLine	|	1	|
|	byline	|	1	|
|	body	|	1	|
|	typeDesc	|	1	|
|	teiHeader	|	1	|
|	docTitle	|	1	|
|	licence	|	1	|
|	msIdentifier	|	1	|
|	profileDesc	|	1	|
|	tagsDecl	|	1	|
|	email	|	1	|
|	TEI	|	1	|
|	table	|	1	|
|	langUsage	|	1	|
|	docAuthor	|	1	|
|	extent	|	1	|
|	language	|	1	|
|	handDesc	|	1	|

### Dokument vorbereiten

### `<lb/>`-GraphElemente untersuchen

Im DTA-XML dient das <lb/>-Element zur Markierung von Zeilenwechseln. Befindet sich am Ende einer Zeile ein getrenntes Wort, unterbricht das <lb/>-Elemente ebendieses Wort. Der folgende Query liefert jene Stellen im Text, an denen ein <lb/>-Element ein Wort am Zeilenwechsel trennt.

~~~cypher
MATCH (w0:XmlWord)-[:NEXT]->(n:XmlTag {_name:'lb'})-[:NEXT]->(w1:XmlWord)
WHERE w0.text =~ '.*-'
RETURN *;
~~~


~~~cypher
MATCH (w0:XmlWord), (n:XmlTag {_name:'lb'}),
p1=shortestPath((w0)-[:NEXT*..1]->(n))
//p1=shortestPath((w0)-[:NEXT*..2]->(n)-[:NEXT*..2]->(w1))
WHERE w0.text =~ '.*-'
RETURN p1;
~~~

`<lb/>`-Elemente per Hand entfernen, die Wörter trennen:

~~~cypher
MATCH
(n2:XmlWord)-[:NEXT_WORD]->
(n3:XmlWord)-[:NEXT_WORD]->
(n4:XmlWord),
(n3)-[:NEXT]->(t1:XmlTag{_name:'lb'})-[:NEXT]->(n4)
WHERE n3.text =~ '.*-'
SET t1.before = n3.text,
t1.after = n4.text,
n4.text = left(n3.text,
size(n3.text)-1)+n4.text
CREATE (n2)-[:NEXT_WORD]->(n4)
CREATE (n2)-[:NEXT]->(t1)
CREATE (n2)-[:NEXT_SIBLING]->(t1)
DETACH DELETE n3
RETURN *;
~~~

~~~cypher
MATCH
(n2:XmlWord)-[:NEXT_WORD]->
(n3:XmlWord)-[:NEXT_WORD]->
(n4:XmlWord),
(n3)-[:NEXT]->(t1:XmlTag{_name:'lb'})-[:NEXT]->(n4)
CREATE (n2)-[:NEXT_WORD]->(n4)
CREATE (n2)-[:NEXT]->(t1)
CREATE (n2)-[:NEXT_SIBLING]->(t1)
DETACH DELETE n3
RETURN *;
~~~

~~~cypher
// lb-GraphElemente erstellen

MATCH p=(t1:XmlTag {_name:'lb'})-[:NEXT]->(n1:XmlWord)-[:NEXT_WORD*..20]->(n2:XmlWord)-[:NEXT]->(t2:XmlTag {_name:'lb'})
CREATE (gt:GraphElement {_name:'lb'})
MERGE (gt)-[:FIRST_CHILD_OF]->(n1)
MERGE (gt)-[:LAST_CHILD_OF]->(n2)
RETURN *;
~~~

#### `<lb/>`-Elemente umwandeln

##### `<lb/>`-Elemente ohne Worttrennungen umwandeln



#### `<fw>`-Elemente aus der Textkette rausnehmen
Im Patzig-Manusskript wird am Ende jeder Seite das erste Wort der folgenden Seite vermerkt um neben der Seitennummerierung auch einen inhaltlichen Anhaltspunkt für die Reihenfolge der Seiten zu geben. Am Ende der Seite 6 befindet sich das Wort `Nachdem`. Mit Graph-Refactoring wird nun dieses Wort aus der Textkette herausgenommen, verbleibt aber als Information im Graphen.
<fw type="catch" place="bottom">Zeit</fw><lb/>
