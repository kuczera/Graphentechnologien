// cypher-import für die Regesten Heinrichs IV.
// cypher-import für Heinrich IV. aus gitlab.rlp.net/ri-data

// alles löschen
MATCH(n) DETACH DELETE n;
CALL apoc.schema.assert({},{},true) YIELD label, key
RETURN *;

// vorab index erzeugen -> Import wird schneller
CREATE INDEX ON :IndexPerson(registerid);
CREATE INDEX ON :Date(startDate);
CREATE INDEX ON :Place(original);
CREATE INDEX ON :Place(normalizedGerman);
CREATE INDEX ON :Lemma(lemma);
CREATE INDEX ON :Literature(literatur);
CREATE INDEX ON :Reference(reference);
CREATE INDEX ON :IndexEntry(registerId);
CREATE INDEX ON :IndexEntry(xmlId);
CREATE INDEX ON :IndexEntry(nodeId);
CREATE INDEX ON :Regesta(latLong);
CREATE INDEX ON :IndexPlace(registerId);
CREATE INDEX ON :IndexEvent(registerId);
CREATE INDEX ON :IndexPerson(registerId);
CREATE INDEX ON :IndexPerson(wikidataId);
CREATE INDEX ON :ExternalResource(url);
CREATE INDEX ON :Regesta(regid);
CREATE INDEX ON :Regesta(regestaNumber);
CREATE INDEX ON :Regesta(regestaVolume);
CREATE INDEX ON :Regesta(origPlaceOfIssue);
CREATE INDEX ON :Regesta(startDate);
CREATE INDEX ON :Regesta(endDate);
CREATE INDEX ON :Regesta(title);
CREATE INDEX ON :Regesta(incipit);
CREATE INDEX ON :Regesta(originalDate);
CREATE INDEX ON :Regesta(externalLinks);
CREATE INDEX ON :Regesta(exchangeIdentifier);
CREATE INDEX ON :Regesta(urn);
CREATE INDEX ON :Regesta(pid);
CREATE INDEX ON :Regesta(uid);
CREATE INDEX ON :Regesta(sorting);
CREATE INDEX ON :Regesta(bandpk);
CREATE INDEX ON :Regesta(laufendenummer);
CREATE INDEX ON :Regesta(regestennummernorm);
CREATE INDEX ON :Regesta(identifier);
CREATE INDEX ON :Regesta(date);

LOAD CSV WITH HEADERS FROM "https://gitlab.rlp.net/Andreas.Kuczera/ri-data/raw/master/data/regesta-csv/RI_alles.csv" AS line FIELDTERMINATOR '\t' 
WITH line 
WHERE line.identifier =~ 'RI III,2,3 .*'
CREATE (r:Regesta {regid:line.persistent_identifier, origPlaceOfIssue:line.`locality_string`, startDate:line.`start_date`, endDate:line.`end_date`, summary:line.`summary`, archivalHistory:line.`archival_history`, title:line.`title`, commentary:line.`commentary`, literature:line.`literature`, footnotes:line.`footnotes`, annotations:line.`annotations`, incipit:line.`incipit`, originalDate:line.`original_date`, versoNote:line.`verso_note`, seal:line.`seal`, recipient:line.`recipient`, witnesses:line.`witnesses`, clerk:line.`clerk`, chancellor:line.`chancellor`, signature:line.`signature`, signatureAddition:line.`signature_addition`, externalLinks:line.`external_links`, exchangeIdentifier:line.`exchange_identifier`, urn:line.`urn`, pid:line.`pid`, uid:line.`uid`, sorting:line.`sorting`, bandpk:line.`bandpk`, laufendenummer:line.`laufendenummer`, regestennummernorm:line.`regestennummernorm`, identifier:line.`identifier`, date:line.`date_string`, persistentIdentifier:line.persistent_identifier});

// registerId erstellen
MATCH (reg:Regesta)
UNWIND apoc.text.regexGroups(reg.identifier, "RI III,2,3 n. (\\S+)") as link
SET reg.registerId = link[1];

// RI-Ausstellungsorte-geo erstellen
LOAD CSV WITH HEADERS FROM 'https://docs.google.com/spreadsheets/d/1Y_HoBKkRkwh4LxIFFzQJHZkB0W57dWoGfdeq00Fi6cg/export?format=csv&id=1Y_HoBKkRkwh4LxIFFzQJHZkB0W57dWoGfdeq00Fi6cg&gid=1929188235'
AS line
WITH line
WHERE line.normalisiertDeutsch IS NOT NULL
MATCH (r:Regesta {origPlaceOfIssue:line.Original})
MERGE (p:Place {normalizedGerman:line.normalisiertDeutsch})
WITH r, p, line
MERGE (r)-[:PLACE_OF_ISSUE]->(p);

// PLACE_OF_ISSUE-Kanten mit zusätzlichen Informationen versehen
LOAD CSV WITH HEADERS FROM 'https://docs.google.com/spreadsheets/d/1Y_HoBKkRkwh4LxIFFzQJHZkB0W57dWoGfdeq00Fi6cg/export?format=csv&id=1Y_HoBKkRkwh4LxIFFzQJHZkB0W57dWoGfdeq00Fi6cg&gid=1929188235'
AS line
WITH line
MATCH (p:Place {normalizedGerman:line.normalisiertDeutsch})<-[rel:PLACE_OF_ISSUE]-(reg:Regesta {origPlaceOfIssue:line.Original})
SET rel.original = line.Original
SET rel.alternativeName = line.Alternativname
SET rel.commentary = line.Kommentar
SET rel.allocation = line.Zuordnung
SET rel.state = line.Lage
SET rel.certainty = line.Sicherheit
SET rel.institutionInCity = line.InstInDerStadt
SET p.longitude = line.Long
SET p.latitude = line.Lat
;


// Regesten und Ausstellungsorte mit neo4j-Koordinaten der Ausstellungsorte versehen
MATCH (o:Place)
WHERE o.latitude IS NOT NULL
SET o.latLong = o.latitude + ',' + o.longitude ;
MATCH (r:Regesta)-[:PLACE_OF_ISSUE]->(o:Place)
SET r.nLatLong = point({latitude: tofloat(o.latitude), longitude: tofloat(o.longitude)})
SET o.nLatLong = point({latitude: tofloat(o.latitude), longitude: tofloat(o.longitude)})
SET r.placeOfIssue = o.normalizedGerman
SET r.latitude = o.latitude
SET r.longitude = o.longitude
SET r.latLong = o.latLong;

// Date in Isodatum umwandeln
MATCH (n:Regesta)
SET n.isoStartDate = date(n.startDate);
MATCH (n:Regesta)
SET n.isoEndDate = date(n.endDate);
MATCH (d:Date)
SET d.isoStartDate = date(d.startDate);
MATCH (d:Date)
SET d.isoEndDate = date(d.endDate);

// URLs für Regesten erstellen
MATCH (reg:Regesta)
WHERE reg.url IS NOT NULL
SET reg.url = ("http://www.regesta-imperii.de/id/" + reg.urn);
MATCH (reg:Regesta)
WHERE reg.persistentIdentifier IS NOT NULL
SET reg.url = ("http://www.regesta-imperii.de/id/" + reg.persistentIdentifier);

// ReggH4-Herrscherhandeln
LOAD CSV WITH HEADERS FROM "https://docs.google.com/spreadsheets/d/15rCYYttK2HynYiZHVX_BKE1skGXM2LWc4pCUycQPm6M/export?format=csv&id=15rCYYttK2HynYiZHVX_BKE1skGXM2LWc4pCUycQPm6M&gid=71724782"
AS line FIELDTERMINATOR ','
MATCH (r:Regesta{identifier:line.Identifier})
FOREACH ( lem in split(line.Verbs, ", ") |
MERGE (l:Action{action:lem})
MERGE (r)-[:ACTION]->(l)
);

// ReggH4-Literaturnetzwerk erstellen
MATCH (reg:Regesta)
WHERE reg.archivalHistory CONTAINS "link"
UNWIND apoc.text.regexGroups(reg.archivalHistory, "<link (\\S+)>(\\S+)</link>") as link
MERGE (ref:Reference {url:link[1]}) ON CREATE SET ref.title=link[2]
MERGE (reg)-[:REFERENCES]->(ref);

// ######################

// IndexEntries erstellen
CALL apoc.load.xml('https://exist.regesta-imperii.de/exist/rest/apps/rixqlib/xql/getRegister.xql?registerName=003-002','',{}, true) yield value as xmlFile
UNWIND xmlFile._register AS wdata
CREATE (e:IndexEntry {xmlId:wdata.id, type:wdata.typ, parentId:wdata.parent, latitude:wdata.lat, longitude:wdata.lon, wikidataId:wdata.wikidata, geonames:wdata.geonames})
RETURN count(e);

// label bei den IndexEntries ergänzen
CALL apoc.load.xml('https://exist.regesta-imperii.de/exist/rest/apps/rixqlib/xql/getRegister.xql?registerName=003-002','',{}, true) yield value as xmlFile
UNWIND xmlFile._register AS lemma
WITH lemma.id AS xmlId,
[x in lemma._lemma where x._type="label" | x._text][0] AS label,
[y in [x in lemma._lemma where x._type ="numbers" | x._numbers][0] where y.type="nennung" | y._text] AS nennung,
[y in [x in lemma._lemma where x._type ="numbers" | x._numbers][0] where y.type="empfaenger" | y._text] AS empfaenger
MATCH (i:IndexEntry {xmlId:xmlId})
SET i.label = label;

// wikidataId ergänzen
CALL apoc.load.xml('https://exist.regesta-imperii.de/exist/rest/apps/rixqlib/xql/getRegister.xql?registerName=003-002','',{}, true) yield value as xmlFile
UNWIND xmlFile._register AS lemma
WITH lemma.id AS xmlId,
[x in lemma._lemma WHERE x._type='idno' AND x.type='wikidata'| x._text][0] AS wikidataId
WITH wikidataId, xmlId WHERE wikidataId IS NOT NULL
MATCH (i:IndexEntry {xmlId:xmlId})
SET i.wikidataId = wikidataId
RETURN count(i);


//IS_SUB_OF erstellen
MATCH (c:IndexEntry), (p:IndexEntry)
WHERE c.parentId = p.xmlId
MERGE (c)-[r:IS_SUB_OF]->(p)
RETURN count(r);


// APPEARS_IN erstellen
CALL apoc.load.xml("https://exist.regesta-imperii.de/exist/rest/apps/rixqlib/xql/getRegister.xql?registerName=003-002",'',{}, true) yield value as xmlFile
UNWIND xmlFile._register AS wdata
UNWIND wdata._lemma AS lemma
UNWIND lemma._numbers AS number
MATCH (e:IndexEntry {xmlId:wdata.id})
MATCH (r:Regesta  {registerId:number._text})
WITH wdata,e,r,number
WHERE number.type = "nennung"
MERGE (e)-[ai:APPEARS_IN]->(r)
RETURN count(ai);

// RECIPIENT IN erstellen
CALL apoc.load.xml("https://exist.regesta-imperii.de/exist/rest/apps/rixqlib/xql/getRegister.xql?registerName=003-002",'',{}, true) yield value as xmlFile
UNWIND xmlFile._register AS wdata
UNWIND wdata._lemma AS lemma
UNWIND lemma._numbers AS number
MATCH (e:IndexEntry {xmlId:wdata.id})
MATCH (r:Regesta  {registerId:number._text})
WITH wdata,e,r,number
WHERE number.type = "empfaenger"
MERGE (e)-[ri:RECIPIENT_IN]->(r)
RETURN count(ri);

// PLACE_OF_ISSUE erstellen
CALL apoc.load.xml("https://exist.regesta-imperii.de/exist/rest/apps/rixqlib/xql/getRegister.xql?registerName=003-002",'',{}, true) yield value as xmlFile
UNWIND xmlFile._register AS wdata
UNWIND wdata._lemma AS lemma
UNWIND lemma._numbers AS number
MATCH (e:IndexEntry {xmlId:wdata.id})
MATCH (r:Regesta  {registerId:number._text})
WITH wdata,e,r,number
WHERE number.type = "austOrt"
MERGE (e)-[ri:PLACE_OF_ISSUE {source:'index'}]->(r)
RETURN count(ri);

// Registerstufen anlegen
MATCH (n1:IndexEntry)
SET n1.pathLength = 'zero';
MATCH (n1:IndexEntry)
WHERE NOT (n1)-[:IS_SUB_OF]->(:IndexEntry)
SET n1.pathLength = '0';
MATCH p=(n1:IndexEntry{pathLength:'0'})<-[r:IS_SUB_OF*..8]-(n2)
WHERE n2.pathLength = 'zero'
SET n2.pathLength = toString(length(p));

// Indexeinträge mit neo4j-Koordinaten der Ausstellungsorte versehen
MATCH (e:IndexEntry)
WHERE e.latitude IS NOT NULL
SET e.nlatLong = point({latitude: tofloat(e.latitude), longitude: tofloat(e.longitude)})
;

// Indexeinträge mit kommegetrennten Koordinaten der Ausstellungsorte versehen
MATCH (e:IndexEntry)
WHERE e.latitude IS NOT NULL
SET e.latLong = e.latitude + ',' + e.longitude ;

// IndexEntry mit weiteren Labels ausstatten
MATCH (e:IndexEntry)
WHERE e.type = 'person'
WITH e
CALL apoc.create.addLabels(id(e), ['IndexPerson']) YIELD node
RETURN node;

MATCH (e:IndexEntry)
WHERE e.type = 'ereignis'
WITH e
CALL apoc.create.addLabels(id(e), ['IndexEvent']) YIELD node
RETURN node;

MATCH (e:IndexEntry)
WHERE e.type = 'sache'
WITH e
CALL apoc.create.addLabels(id(e), ['IndexThing']) YIELD node
RETURN node;

MATCH (e:IndexEntry)
WHERE e.type = 'ort'
WITH e
CALL apoc.create.addLabels(id(e), ['IndexPlace']) YIELD node
RETURN node;

// Registereintragspfade erstellen
Match (e0:IndexEntry)<-[:IS_SUB_OF]-(e1:IndexEntry)
SET e1.path = e0.label + ' // ' + e1.label;
Match (e0:IndexEntry {pathLength:'0'})<-[:IS_SUB_OF]-(e1:IndexEntry)<-[:IS_SUB_OF]-(e2:IndexEntry)
SET e2.path = e0.label + ' // ' + e1.label + ' // ' + e2.label;
Match (e0:IndexEntry {pathLength:'0'})<-[:IS_SUB_OF]-(e1:IndexEntry)<-[:IS_SUB_OF]-(e2:IndexEntry)<-[:IS_SUB_OF]-(e3:IndexEntry)
SET e3.path = e0.label + ' // ' + e1.label + ' // ' + e2.label + ' // ' + e3.label;
Match (e0:IndexEntry {pathLength:'0'})<-[:IS_SUB_OF]-(e1:IndexEntry)<-[:IS_SUB_OF]-(e2:IndexEntry)<-[:IS_SUB_OF]-(e3:IndexEntry)<-[:IS_SUB_OF]-(e4:IndexEntry)
SET e4.path = e0.label + ' // ' + e1.label + ' // ' + e2.label + ' // ' + e3.label + ' // ' + e4.label;
Match (e0:IndexEntry {pathLength:'0'})<-[:IS_SUB_OF]-(e1:IndexEntry)<-[:IS_SUB_OF]-(e2:IndexEntry)<-[:IS_SUB_OF]-(e3:IndexEntry)<-[:IS_SUB_OF]-(e4:IndexEntry)<-[:IS_SUB_OF]-(e5:IndexEntry)
SET e5.path = e0.label + ' // ' + e1.label + ' // ' + e2.label + ' // ' + e3.label + ' // ' + e4.label + ' // ' + e5.label;
Match (e0:IndexEntry {pathLength:'0'})<-[:IS_SUB_OF]-(e1:IndexEntry)<-[:IS_SUB_OF]-(e2:IndexEntry)<-[:IS_SUB_OF]-(e3:IndexEntry)<-[:IS_SUB_OF]-(e4:IndexEntry)<-[:IS_SUB_OF]-(e5:IndexEntry)<-[:IS_SUB_OF]-(e6:IndexEntry)
SET e6.path = e0.label + ' // ' + e1.label + ' // ' + e2.label + ' // ' + e3.label + ' // ' + e4.label + ' // ' + e5.label + ' // ' + e6.label;
